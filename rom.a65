; -------------------------------------------------------------------------
; Commmodore-LCD test programs
; Copyright (C)2016-2023 Gábor Lénárt (LGB)
;
; Yes, this is based on a disassembled ROM (as you can notice from the
; source), but that ROM was written by me too, though I've lost the source.
; Thus I had to disassemble my own past work ...
; -------------------------------------------------------------------------
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <https://www.gnu.org/licenses/>.
; -------------------------------------------------------------------------

        .setcpu "65C02"
	.ORG $4000

rom_start = *

; First 8 byte of the ROM, not very clear what these bytes should mean
; The last three seems to be packed-BCD date UNLESS if $DD for all (like here)
.BYTE $00, $00, $ff, $ff, $01, $dd, $dd, $dd
; ROM identifier
.BYTE "Commodore LCD"

; The "app" ID follows (6 bytes):
entry_start = *
.BYTE entry_len	; length of the app entry
.BYTE $04	; ??
.BYTE $10	; ??
.BYTE $00	; ??
.WORD yoda_app_entry	; entry point (3b 40 -> $403B)
; App "name" with "extension"
.BYTE "LGB.TST"
entry_len = * - entry_start

; At offset $22 now!!!
.BYTE 0 	; No second app in this ROM
; At offset $23 now!!!




; Displays 'LGB' on the screen in reverse (screen codes)
.PROC	debug_stuff
        lda     #$A0
        sta     $084B
        sta     $084F
        lda     #$8C
        sta     $084C
        lda     #$87
        sta     $084D
        lda     #$82
        sta     $084E
        rts
.ENDPROC

; ----------------------------------------------------------------------------
; Please see: http://commodore-lcd.lgb.hu/specification.html#display
.PROC	yoda_app_entry
        cpx     #$00
	; Test, to see, if the CLCD SHELL calls our app with X=0,
	; since it was not clear what the different "call modes" are.
        beq     debug_stuff
        sei
        lda     #$0A
	; FF82: LCD ctrl graph/alt
        sta     $FF82
	; FF83: TEST/S40/CS80/CHRW
        sta     $FF83
        lda     #$10
	; FF81: LCD ctrl YS7 ... YS0
        sta     $FF81
	; FF80: LCD ctrl XS6 ... XS0
        stz     $FF80
        jsr     init_yoda_screen_content
        lda     #$00
L4055:  ldx     #$10
L4057:  stx     $FF81
        ldy     #$E0
L405C:  inc     a
        bne     L405C
        iny
        bne     L405C
        inx
        cpx     #$40
        bcc     L4057
        bra     L4055
.ENDPROC


.PROC	init_yoda_screen_content
        lda     #$08
        sta     $03
        lda     #$28
        sta     $05
        lda     #.LOBYTE(yoda_data)
        sta     $00
        lda     #.HIBYTE(yoda_data)
        sta     $01
        stz     $02
        stz     $04
        ldy     #$00
        ldx     #$1F
loop:   lda     ($00),y
        sta     ($02),y
	; the inverse version follows:
        eor     #$FF
        sta     ($04),y
        iny
        bne     loop
        inc     $01
        inc     $03
        inc     $05
        dex
        bpl     loop
        rts
.ENDPROC

; ----------------------------------------------------------------------------

; DATA follows ;) Originally at $4096

yoda_data:
	.INCBIN	"clcd-myrom.rom", $96, $2000

.REPEAT $8000+rom_start-*
.BYTE $00
.ENDREPEAT
