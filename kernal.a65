; Yes, this is a disassembled ROM, but that ROM was written by me,
; though I've lost the source. So indeed, I had to disassemble my own
; ROM.

; da65 V2.18 - Ubuntu 2.18-1
; Created:    2023-05-19 11:10:15
; Input file: clcd-myrom.rom
; Page:       1




        .setcpu	"65C02"

.ORG	$C000

yoda_data:
.INCBIN	"clcd-myrom.rom", $96, $2000



.REPEAT	$FA00 - *
	.BYTE	0
.ENDREPEAT


.PROC	irq_routine
	RTI
.ENDPROC

.PROC	nmi_routine
	RTI
.ENDPROC

; CLCD needs some preparation to be able to work, if someone
; needs to write a KERNAL. It can power itself off. Thus,
; one of the first things it must do, to initialize the power
; on signal on one of the VIAs, so actually the machine stays
; on, after the user releases the ON button ;) - Or something
; like that, I can only assume the behaviour according the
; disassembled (by myself) KERNAL.

.PROC	reset_routine
	SEI		; disable interrupts
	CLD		; clear decimal mode
	; Configure VIA / set power-on signal
	LDA	#$04
	TSB	$F802	; VIA1 DDR-B
	TRB	$F800	; VIA1 PORT-B
	; Set MMU mode to KERNAL
	STA	$FA00	; dummy write (only writing accounts), this is ROM area otherwise
	; Set kernal window register to the second 16K, thus with the first 16K fixed to RAM in KERNAL mode,
	LDA	#0
	STA	$FF00	; write-only, this is ROM area otherwise
	; Run our stuff
	JMP	yoda_main
.ENDPROC


; ----------------------------------------------------------------------------
; Please see: http://commodore-lcd.lgb.hu/specification.html#display
.PROC	yoda_main
        lda     #$0A                            ; 4040 A9 0A                    ..
	; FF82: LCD ctrl graph/alt
        sta     $FF82                           ; 4042 8D 82 FF                 ...
	; FF83: TEST/S40/CS80/CHRW
        sta     $FF83                           ; 4045 8D 83 FF                 ...
        lda     #$10                            ; 4048 A9 10                    ..
	; FF81: LCD ctrl YS7 ... YS0
        sta     $FF81                           ; 404A 8D 81 FF                 ...
	; FF80: LCD ctrl XS6 ... XS0
        stz     $FF80                           ; 404D 9C 80 FF                 ...
        jsr     init_yoda_screen_content        ; 4050 20 69 40                  i@
        lda     #$00                            ; 4053 A9 00                    ..
L4055:  ldx     #$10                            ; 4055 A2 10                    ..
L4057:  stx     $FF81                           ; 4057 8E 81 FF                 ...
        ldy     #$E0                            ; 405A A0 E0                    ..
L405C:  inc     a                               ; 405C 1A                       .
        bne     L405C                           ; 405D D0 FD                    ..
        iny                                     ; 405F C8                       .
        bne     L405C                           ; 4060 D0 FA                    ..
        inx                                     ; 4062 E8                       .
        cpx     #$40                            ; 4063 E0 40                    .@
        bcc     L4057                           ; 4065 90 F0                    ..
        bra     L4055                           ; 4067 80 EC                    ..
.ENDPROC


.PROC	init_yoda_screen_content
        lda     #$08                            ; 4069 A9 08                    ..
        sta     $03                             ; 406B 85 03                    ..
        lda     #$28                            ; 406D A9 28                    .(
        sta     $05                             ; 406F 85 05                    ..
        lda     #.LOBYTE(yoda_data)             ; 4071 A9 96                    ..
        sta     $00                             ; 4073 85 00                    ..
        lda     #.HIBYTE(yoda_data)             ; 4075 A9 40                    .@
        sta     $01                             ; 4077 85 01                    ..
        stz     $02                             ; 4079 64 02                    d.
        stz     $04                             ; 407B 64 04                    d.
	ldy     #$00                            ; 407D A0 00                    ..
        ldx     #$1F                            ; 407F A2 1F                    ..
loop:   lda     ($00),y                         ; 4081 B1 00                    ..
        sta     ($02),y                         ; 4083 91 02                    ..
	; the inverse version follows:
        eor     #$FF                            ; 4085 49 FF                    I.
        sta     ($04),y                         ; 4087 91 04                    ..
        iny                                     ; 4089 C8                       .
        bne     loop                            ; 408A D0 F5                    ..
        inc     $01                             ; 408C E6 01                    ..
        inc     $03                             ; 408E E6 03                    ..
        inc     $05                             ; 4090 E6 05                    ..
        dex                                     ; 4092 CA                       .
        bpl     loop                            ; 4093 10 EC                    ..
        rts                                     ; 4095 60                       `
.ENDPROC


.REPEAT $FFFF - * - 6 + 1
	.BYTE	0
.ENDREPEAT

.WORD	nmi_routine
.WORD	reset_routine
.WORD	irq_routine


