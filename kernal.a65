; -------------------------------------------------------------------------
; Commmodore-LCD test programs
; Copyright (C)2016-2023 Gábor Lénárt (LGB)
;
; Yes, this is based on a disassembled ROM (as you can notice from the
; source), but that ROM was written by me too, though I've lost the source.
; Thus I had to disassemble my own past work ...
; -------------------------------------------------------------------------
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <https://www.gnu.org/licenses/>.
; -------------------------------------------------------------------------

        .setcpu	"65C02"

.ORG	$C000

yoda_data:
.INCBIN	"clcd-myrom.rom", $96, $2000



.REPEAT	$FA00 - *
	.BYTE	0
.ENDREPEAT


.PROC	irq_routine
	RTI
.ENDPROC

.PROC	nmi_routine
	RTI
.ENDPROC

; CLCD needs some preparation to be able to work, if someone
; needs to write a KERNAL. It can power itself off. Thus,
; one of the first things it must do, to initialize the power
; on signal on one of the VIAs, so actually the machine stays
; on, after the user releases the ON button ;) - Or something
; like that, I can only assume the behaviour according the
; disassembled (by myself) KERNAL.

.PROC	reset_routine
	SEI		; disable interrupts
	CLD		; clear decimal mode
	; Configure VIA / set power-on signal
	LDA	#$04
	TSB	$F802	; VIA1 DDR-B
	TRB	$F800	; VIA1 PORT-B
	; Set MMU mode to KERNAL
	STA	$FA00	; dummy write (only writing accounts), this is ROM area otherwise
	; Set kernal window register to the second 16K, thus with the first 16K fixed to RAM in KERNAL mode,
	LDA	#0
	STA	$FF00	; write-only, this is ROM area otherwise
	; Run our stuff
	JMP	yoda_main
.ENDPROC


; ----------------------------------------------------------------------------
; Please see: http://commodore-lcd.lgb.hu/specification.html#display
.PROC	yoda_main
        lda     #$0A
	; FF82: LCD ctrl graph/alt
        sta     $FF82
	; FF83: TEST/S40/CS80/CHRW
        sta     $FF83
        lda     #$10
	; FF81: LCD ctrl YS7 ... YS0
        sta     $FF81
	; FF80: LCD ctrl XS6 ... XS0
        stz     $FF80
        jsr     init_yoda_screen_content
        lda     #$00
L4055:  ldx     #$10
L4057:  stx     $FF81
        ldy     #$E0
L405C:  inc     a
        bne     L405C
        iny
        bne     L405C
        inx
        cpx     #$40
        bcc     L4057
        bra     L4055
.ENDPROC


.PROC	init_yoda_screen_content
        lda     #$08
        sta     $03
        lda     #$28
        sta     $05
        lda     #.LOBYTE(yoda_data)
        sta     $00
        lda     #.HIBYTE(yoda_data)
        sta     $01
        stz     $02
        stz     $04
        ldy     #$00
        ldx     #$1F
loop:   lda     ($00),y
        sta     ($02),y
	; the inverse version follows:
        eor     #$FF
        sta     ($04),y
        iny
        bne     loop
        inc     $01
        inc     $03
        inc     $05
        dex
        bpl     loop
        rts
.ENDPROC


.REPEAT $FFFF - * - 6 + 1
	.BYTE	0
.ENDREPEAT

.WORD	nmi_routine
.WORD	reset_routine
.WORD	irq_routine
