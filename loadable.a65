; -------------------------------------------------------------------------
; Commmodore-LCD test programs
; Copyright (C)2016-2023 Gábor Lénárt (LGB)
;
; Yes, this is based on a disassembled ROM (as you can notice from the
; source), but that ROM was written by me too, though I've lost the source.
; Thus I had to disassemble my own past work ...
; -------------------------------------------------------------------------
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <https://www.gnu.org/licenses/>.
; -------------------------------------------------------------------------

RELOCATE_TO = $5000

        .setcpu "65C02"
	.ORG $1001 - 2

	.WORD	*	; load address

	; the basic stub
.SCOPE
	.WORD	lastline, 0
	.BYTE	$9E					; "SYS" basic token
	.BYTE	" "
	.BYTE	$30+.LOBYTE((basic_main .MOD 10000)/ 1000)
	.BYTE	$30+.LOBYTE((basic_main .MOD  1000)/  100)
	.BYTE	$30+.LOBYTE((basic_main .MOD   100)/   10)
	.BYTE	$30+.LOBYTE( basic_main .MOD    10)
	.BYTE	0
lastline:
	.WORD	0
.ENDSCOPE




.PROC	basic_main
	SEI
	STA	$FB00	; select MMU mode "RAM" (dummy write, the written value is not important)
	LDY	#.HIBYTE($8000 - RELOCATE_TO)
	LDX	#0
loop:
	INC	$800
sm1:	LDA	RELOCATE_FROM,X
sm2:	STA	RELOCATE_TO,X
	INX
	BNE	loop
	DEY
	BEQ	end
	INC	sm1+2
	INC	sm2+2
	BRA	loop
end:
	JMP	app_main
.ENDPROC


RELOCATE_FROM = *
.ORG	RELOCATE_TO



; ----------------------------------------------------------------------------
; Please see: http://commodore-lcd.lgb.hu/specification.html#display
.PROC	app_main
        lda     #$0A
	; FF82: LCD ctrl graph/alt
        sta     $FF82
	; FF83: TEST/S40/CS80/CHRW
        sta     $FF83
        lda     #$10
	; FF81: LCD ctrl YS7 ... YS0
        sta     $FF81
	; FF80: LCD ctrl XS6 ... XS0
        stz     $FF80
        jsr     init_yoda_screen_content
        lda     #$00
L4055:  ldx     #$10
L4057:  stx     $FF81
        ldy     #$E0
L405C:  inc     a
        bne     L405C
        iny
        bne     L405C
        inx
        cpx     #$40
        bcc     L4057
        bra     L4055
.ENDPROC


.PROC	init_yoda_screen_content
        lda     #$08
        sta     $03
        lda     #$28
        sta     $05
        lda     #.LOBYTE(yoda_data)
        sta     $00
        lda     #.HIBYTE(yoda_data)
        sta     $01
        stz     $02
        stz     $04
        ldy     #$00
        ldx     #$1F
loop:   lda     ($00),y
        sta     ($02),y
	; the inverse version follows:
        eor     #$FF
        sta     ($04),y
        iny
        bne     loop
        inc     $01
        inc     $03
        inc     $05
        dex
        bpl     loop
        rts
.ENDPROC

; ----------------------------------------------------------------------------

; DATA follows ;) Originally at $4096

yoda_data:
	.INCBIN	"clcd-myrom.rom", $96, $2000
